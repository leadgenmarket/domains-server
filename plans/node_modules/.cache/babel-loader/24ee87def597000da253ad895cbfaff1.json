{"ast":null,"code":"var _jsxFileName = \"/Users/laurkankusu/Documents/development/domains-server/admin/src/components/app/app.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport { withApiService } from \"../hoc\";\nimport SideMenu from \"../../components/side-menu\";\nimport { connect } from 'react-redux';\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\nimport Cookies from 'js-cookie';\nimport \"./app.css\";\nimport { Spinner } from \"../spinner\";\nimport { bindActionCreators } from 'redux';\nimport { compose } from '../../utils';\nimport { checkAuth } from \"../../actions\";\nimport ApiService from \"../../services/api-service\";\nimport { LoginPage } from \"../pages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = _ref => {\n  _s();\n\n  let {\n    auth,\n    phone,\n    checkAuth\n  } = _ref;\n  const location = useLocation().pathname;\n  const history = useNavigate();\n\n  if (location == \"/logout\") {\n    let apiService = new ApiService();\n    apiService.logout();\n    history.replace(\"/\");\n  }\n\n  useEffect(() => {//checkAuth()\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n  /*if (auth == null) {\n      return <Spinner />\n  } else if(auth==false){*/\n\n  /*} else {\n      return (\n          \n          <React.Fragment>\n              {/*<Navbar />\n              <SideMenu />}*/\n\n  {\n    /*<Routes>\n       <Route path=\"/off-days\" component={ReservePreventPage} exact />\n       <Route path=\"/clients/blocked\" component={BlackListPage} exact />\n       <Route path=\"/objects\" component={ObjectsPage} exact/>\n       <Route path=\"/objects/:objectID\" component={ObjectDetail} exact/>\n       <Route path=\"/halls/list\" component={Halls} exact/>\n       <Route path=\"/halls/panoramas\" component={Panoramas} exact/>\n       <Route path=\"/halls/schemes\" component={Schemes} exact/>\n       <Route path=\"/employees\" component={ EmployeesPage} exact/>\n       <Route path=\"/services\" component={Services} exact/>\n       <Route path=\"/actions\" component={ActionsPage} exact/>\n       <Route path=\"/photos\" component={PhotosPage}/>\n    <Route path=\"/\" component={Dashboard}/>*/\n  }\n  {\n    /* </Routes>\n    </React.Fragment>\n    )\n    }*/\n  }\n};\n\n_s(App, \"lE9A8Pz91oyr5rDrgjG4tdnh7uQ=\", false, function () {\n  return [useLocation, useNavigate];\n});\n\n_c = App;\n\nconst mapStateToProps = _ref2 => {\n  let {} = _ref2;\n  return {}; //auth, phone\n};\n\nconst mapDispatchToProps = (dispatch, _ref3) => {\n  let {\n    apiService\n  } = _ref3;\n  return bindActionCreators({\n    checkAuth: checkAuth(apiService)\n  }, dispatch);\n};\n\nexport default compose(withApiService(), connect(mapStateToProps, mapDispatchToProps))(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/laurkankusu/Documents/development/domains-server/admin/src/components/app/app.js"],"names":["React","useEffect","Route","Routes","withApiService","SideMenu","connect","useLocation","useNavigate","jwt_decode","Cookies","Spinner","bindActionCreators","compose","checkAuth","ApiService","LoginPage","App","auth","phone","location","pathname","history","apiService","logout","replace","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,KAAR,EAAeC,MAAf,QAA4B,kBAA5B;AACA,SAAQC,cAAR,QAA6B,QAA7B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,kBAAvC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,WAAP;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,SAAT,QAA0B,UAA1B;;;AAEA,MAAMC,GAAG,GAAG,QAA+B;AAAA;;AAAA,MAA9B;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeL,IAAAA;AAAf,GAA8B;AACvC,QAAMM,QAAQ,GAAGb,WAAW,GAAGc,QAA/B;AACA,QAAMC,OAAO,GAAGd,WAAW,EAA3B;;AACA,MAAIY,QAAQ,IAAI,SAAhB,EAA2B;AACvB,QAAIG,UAAU,GAAG,IAAIR,UAAJ,EAAjB;AACAQ,IAAAA,UAAU,CAACC,MAAX;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAgB,GAAhB;AACH;;AACDxB,EAAAA,SAAS,CAAC,MAAI,CACV;AACH,GAFQ,EAEP,EAFO,CAAT;AAIA,sBACI,QAAC,MAAD;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,OAAO,eAAE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAMA;AACJ;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;;AACgB;AAAC;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAkD;AACnC;AAAC;AAChB;AACA;AACA;AAAQ;AACP,CA7CD;;GAAMgB,G;UACeV,W,EACDC,W;;;KAFdS,G;;AA+CN,MAAMS,eAAe,GAAG,SAAwD;AAAA,MAAvD,EAAuD;AAC5E,SAAO,EAAP,CAD4E,CAC/D;AAChB,CAFD;;AAIA,MAAMC,kBAAkB,GAAG,CAACC,QAAD,YAA6B;AAAA,MAAlB;AAAEL,IAAAA;AAAF,GAAkB;AACpD,SAAOX,kBAAkB,CAAC;AACtBE,IAAAA,SAAS,EAAEA,SAAS,CAACS,UAAD;AADE,GAAD,EAEtBK,QAFsB,CAAzB;AAGH,CAJD;;AAMA,eAAef,OAAO,CAClBT,cAAc,EADI,EAElBE,OAAO,CAACoB,eAAD,EAAkBC,kBAAlB,CAFW,CAAP,CAGXV,GAHW,CAAf","sourcesContent":["import React, {useEffect} from \"react\"\nimport {Route, Routes} from \"react-router-dom\"\nimport {withApiService} from \"../hoc\"\nimport SideMenu from \"../../components/side-menu\"\nimport { connect } from 'react-redux';\nimport {useLocation, useNavigate} from \"react-router-dom\"\nimport jwt_decode from \"jwt-decode\";\nimport Cookies from 'js-cookie';\nimport \"./app.css\"\nimport { Spinner } from \"../spinner\"\nimport { bindActionCreators } from 'redux';\nimport { compose } from '../../utils';\nimport { checkAuth } from \"../../actions\"\nimport ApiService from \"../../services/api-service\"\nimport { LoginPage } from \"../pages\";\n\nconst App = ({ auth, phone, checkAuth}) => {\n    const location = useLocation().pathname;\n    const history = useNavigate()\n    if (location == \"/logout\") {\n        let apiService = new ApiService()\n        apiService.logout()\n        history.replace(\"/\")\n    }\n    useEffect(()=>{\n        //checkAuth()\n    },[])\n\n    return (\n        <Routes>\n            <Route path=\"/\" element={<LoginPage />} />\n        </Routes>\n    )\n\n    /*if (auth == null) {\n        return <Spinner />\n    } else if(auth==false){*/\n       \n    /*} else {\n        return (\n            \n            <React.Fragment>\n                {/*<Navbar />\n                <SideMenu />}*/\n                {/*<Routes>\n                    <Route path=\"/off-days\" component={ReservePreventPage} exact />\n                    <Route path=\"/clients/blocked\" component={BlackListPage} exact />\n                    <Route path=\"/objects\" component={ObjectsPage} exact/>\n                    <Route path=\"/objects/:objectID\" component={ObjectDetail} exact/>\n                    <Route path=\"/halls/list\" component={Halls} exact/>\n                    <Route path=\"/halls/panoramas\" component={Panoramas} exact/>\n                    <Route path=\"/halls/schemes\" component={Schemes} exact/>\n                    <Route path=\"/employees\" component={ EmployeesPage} exact/>\n                    <Route path=\"/services\" component={Services} exact/>\n                    <Route path=\"/actions\" component={ActionsPage} exact/>\n                    <Route path=\"/photos\" component={PhotosPage}/>\n        <Route path=\"/\" component={Dashboard}/>*/}\n               {/* </Routes>\n            </React.Fragment>\n               )\n    }*/}\n}\n\nconst mapStateToProps = ({ /*authStatus: { auth, phone, loading, error }*/}) => {\n    return {  }; //auth, phone\n};\n\nconst mapDispatchToProps = (dispatch, { apiService}) => {\n    return bindActionCreators({\n        checkAuth: checkAuth(apiService)\n    }, dispatch);\n};\n\nexport default compose(\n    withApiService(),\n    connect(mapStateToProps, mapDispatchToProps)\n  )(App)"]},"metadata":{},"sourceType":"module"}