{"ast":null,"code":"const loginRequested = () => {\n  return {\n    type: 'FETCH_LOGIN_REQUEST'\n  };\n};\n\nconst loginSuccess = () => {\n  return {\n    type: 'FETCH_LOGIN_SUCCESS'\n  };\n};\n\nconst loginError = error => {\n  return {\n    type: 'FETCH_LOGIN_ERROR',\n    payload: error\n  };\n};\n\nconst notAuthorized = () => {\n  return {\n    type: 'NOT_AUTHORIZED'\n  };\n};\n\nconst registartionRequested = () => {\n  return {\n    type: 'FETCH_REGISTER_REQUEST'\n  };\n};\n\nconst returnToRegistration = () => {\n  return {\n    type: 'RETURN_TO_REGISTRATION'\n  };\n};\n\nconst registartionSuccess = phone => {\n  return {\n    type: 'FETCH_REGISTER_SUCCESS',\n    payload: phone\n  };\n};\n\nconst registartionError = error => {\n  return {\n    type: 'FETCH_REGISTER_ERROR',\n    payload: error\n  };\n};\n\nconst verifyCodeRequest = () => {\n  return {\n    type: 'FETCH_CODE_REQUEST'\n  };\n};\n\nconst verifyCodeSuccess = () => {\n  return {\n    type: 'FETCH_CODE_SUCCESS'\n  };\n};\n\nconst verifyCodeError = error => {\n  return {\n    type: 'FETCH_CODE_ERROR',\n    payload: error\n  };\n};\n\nconst fetchLogin = apiService => _ref => {\n  let {\n    phone,\n    pass\n  } = _ref;\n  return dispatch => {\n    dispatch(loginRequested());\n    apiService.login(phone, pass).then(data => dispatch(loginSuccess(data))).catch(err => dispatch(loginError(err.response.data.Message)));\n  };\n};\n\nconst fetchRegister = apiService => data => dispatch => {\n  dispatch(loginRequested());\n  apiService.register(data).then(res => {\n    dispatch(registartionSuccess(data.phone));\n  }).catch(err => {\n    dispatch(registartionError(err.response.data.Message));\n  });\n};\n\nconst fetchCode = apiService => data => dispatch => {\n  dispatch(verifyCodeRequest());\n  apiService.verifyCode(data).then(data => dispatch(verifyCodeSuccess())).catch(err => dispatch(verifyCodeError(err.response.data.Message)));\n};\n\nconst checkAuth = apiService => () => dispatch => {\n  dispatch(loginRequested());\n  apiService.ping().then(data => dispatch(loginSuccess(data))).catch(() => {\n    dispatch(notAuthorized());\n  });\n};\n\nconst fetchLogout = apiService => () => dispatch => {\n  dispatch(loginRequested());\n  apiService.logout().then(() => dispatch(notAuthorized())).catch(() => {\n    dispatch(loginSuccess());\n  });\n};\n\nexport { fetchLogin, checkAuth, fetchLogout, registartionRequested, registartionSuccess, verifyCodeRequest, verifyCodeError, fetchRegister, fetchCode, returnToRegistration };","map":{"version":3,"sources":["/Users/laurkankusu/Documents/development/domains-server/admin/src/actions/auths.js"],"names":["loginRequested","type","loginSuccess","loginError","error","payload","notAuthorized","registartionRequested","returnToRegistration","registartionSuccess","phone","registartionError","verifyCodeRequest","verifyCodeSuccess","verifyCodeError","fetchLogin","apiService","pass","dispatch","login","then","data","catch","err","response","Message","fetchRegister","register","res","fetchCode","verifyCode","checkAuth","ping","fetchLogout","logout"],"mappings":"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","sourcesContent":["const loginRequested = () => {\n    return {\n      type: 'FETCH_LOGIN_REQUEST'\n    };\n};\n  \nconst loginSuccess = () => {\n    return {\n      type: 'FETCH_LOGIN_SUCCESS',\n    };\n};\n  \nconst loginError = (error) => {\n    return {\n      type: 'FETCH_LOGIN_ERROR',\n      payload: error\n    };\n};\n\nconst notAuthorized = () => {\n    return {\n      type: 'NOT_AUTHORIZED'\n    }\n}\n\nconst registartionRequested = () => {\n  return {\n    type: 'FETCH_REGISTER_REQUEST',\n  };\n};\n\nconst returnToRegistration = () => {\n  return {\n    type: 'RETURN_TO_REGISTRATION',\n  };\n};\n\nconst registartionSuccess = (phone) => {\n  return {\n    type: 'FETCH_REGISTER_SUCCESS',\n    payload: phone,\n  };\n};\n\nconst registartionError = (error) => {\n  return {\n    type: 'FETCH_REGISTER_ERROR',\n    payload: error\n  };\n};\n\nconst verifyCodeRequest = () => {\n  return {\n    type: 'FETCH_CODE_REQUEST'\n  }\n}\n\nconst verifyCodeSuccess = () => {\n  return {\n    type: 'FETCH_CODE_SUCCESS'\n  }\n}\n\nconst verifyCodeError = (error) => {\n  return {\n    type: 'FETCH_CODE_ERROR',\n    payload: error\n  }\n}\n\n\n\n\nconst fetchLogin = (apiService) => ({phone, pass}) => (dispatch) => {\n    dispatch(loginRequested());\n    apiService.login(phone,pass)\n      .then((data) => dispatch(loginSuccess(data)))\n      .catch((err) => dispatch(loginError(err.response.data.Message)));\n};\n\nconst fetchRegister = (apiService) => (data) => (dispatch) => {\n  dispatch(loginRequested());\n  apiService.register(data)\n    .then((res) => {\n      \n      dispatch(registartionSuccess(data.phone))\n    })\n    .catch((err) => {\n      dispatch(registartionError(err.response.data.Message))\n    });\n};\n\nconst fetchCode = (apiService) => (data) => (dispatch) => {\n  dispatch(verifyCodeRequest());\n  apiService.verifyCode(data)\n    .then((data) => dispatch(verifyCodeSuccess()))\n    .catch((err) => dispatch(verifyCodeError(err.response.data.Message)));\n};\n\nconst checkAuth = (apiService) => () => (dispatch) => {\n  dispatch(loginRequested());\n  apiService.ping()\n    .then((data) => dispatch(loginSuccess(data)))\n    .catch(()=>{dispatch(notAuthorized())});\n};\n\nconst fetchLogout = (apiService) => () => (dispatch) => {\n  dispatch(loginRequested());\n  apiService.logout()\n    .then(() => dispatch(notAuthorized()))\n    .catch(()=>{dispatch(loginSuccess())});\n};\n\nexport {\n    fetchLogin,\n    checkAuth,\n    fetchLogout,\n\n    registartionRequested,\n    registartionSuccess,\n    verifyCodeRequest,\n    verifyCodeError,\n    fetchRegister,\n    fetchCode,\n    returnToRegistration\n}"]},"metadata":{},"sourceType":"module"}