{"ast":null,"code":"const domainsRequested = () => {\n  return {\n    type: 'DOMIANS_REQUESTED'\n  };\n};\n\nconst domainsRequestSuccess = domains => {\n  return {\n    type: 'DOMIANS_FETCH_SUCCESS',\n    payload: domains\n  };\n};\n\nconst domainsRequestMoreSuccess = domains => {\n  return {\n    type: 'DOMAINS_GET_MORE',\n    payload: domains\n  };\n};\n\nconst domainsRequestError = () => {\n  return {\n    type: 'DOMIANS_FETCH_ERROR'\n  };\n};\n\nconst domainsRequestMoreError = () => {\n  return {\n    type: 'DOMIANS_FETCH_MORE_ERROR'\n  };\n};\n\nconst deleteDomainAction = id => {\n  return {\n    type: 'DOMAINS_DELETE_ONE',\n    payload: id\n  };\n};\n\nconst addDomainToList = domain => {\n  return {\n    type: 'DOMAINS_ADD_ONE',\n    payload: domain\n  };\n};\n\nconst removeDomainFromList = id => {\n  return {\n    type: 'DOMAINS_REMOVE_ONE',\n    payload: id\n  };\n};\n\nconst fetchDomains = apiService => (searchUrl, cursor, itemscnt) => dispatch => {\n  dispatch(domainsRequested);\n  apiService.domainsList(searchUrl, cursor, itemscnt).then(response => {\n    console.log(response.data);\n    dispatch(domainsRequestSuccess(response.data));\n  }).catch(err => dispatch(domainsRequestError(err)));\n};\n\nconst fetchMore = apiService => (searchUrl, cursor, itemscnt) => dispatch => {\n  dispatch(domainsRequested);\n  apiService.domainsList(searchUrl, cursor, itemscnt).then(response => dispatch(domainsRequestMoreSuccess(response.data))).catch(err => {\n    dispatch(domainsRequestMoreError(err));\n  });\n};\n\nconst deleteDomain = apiService => id => dispatch => {\n  apiService.deleteDomain(id).then(response => dispatch(deleteDomainAction(id))).catch(err => dispatch(domainsRequestError(err)));\n};\n\nexport { fetchDomains, addDomainToList, deleteDomain, removeDomainFromList, fetchMore };","map":{"version":3,"sources":["/Users/laurkankusu/Documents/development/domains-server/plans/src/actions/domains.js"],"names":["domainsRequested","type","domainsRequestSuccess","domains","payload","domainsRequestMoreSuccess","domainsRequestError","domainsRequestMoreError","deleteDomainAction","id","addDomainToList","domain","removeDomainFromList","fetchDomains","apiService","searchUrl","cursor","itemscnt","dispatch","domainsList","then","response","console","log","data","catch","err","fetchMore","deleteDomain"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,MAAM;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJD;;AAMA,MAAMC,qBAAqB,GAAIC,OAAD,IAAa;AACvC,SAAO;AACHF,IAAAA,IAAI,EAAE,uBADH;AAEHG,IAAAA,OAAO,EAAED;AAFN,GAAP;AAIH,CALD;;AAOA,MAAME,yBAAyB,GAAIF,OAAD,IAAa;AAC3C,SAAO;AACHF,IAAAA,IAAI,EAAE,kBADH;AAEHG,IAAAA,OAAO,EAAED;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMG,mBAAmB,GAAG,MAAM;AAC9B,SAAO;AACHL,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJD;;AAMA,MAAMM,uBAAuB,GAAG,MAAM;AAClC,SAAO;AACHN,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJD;;AAQA,MAAMO,kBAAkB,GAAIC,EAAD,IAAQ;AAC/B,SAAO;AACHR,IAAAA,IAAI,EAAE,oBADH;AAEHG,IAAAA,OAAO,EAAEK;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMC,eAAe,GAAIC,MAAD,IAAY;AAChC,SAAO;AACHV,IAAAA,IAAI,EAAE,iBADH;AAEHG,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMC,oBAAoB,GAAIH,EAAD,IAAQ;AACjC,SAAO;AACHR,IAAAA,IAAI,EAAE,oBADH;AAEHG,IAAAA,OAAO,EAAEK;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMI,YAAY,GAAIC,UAAD,IAAgB,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,QAApB,KAAkCC,QAAD,IAAc;AAChFA,EAAAA,QAAQ,CAAClB,gBAAD,CAAR;AACAc,EAAAA,UAAU,CAACK,WAAX,CAAuBJ,SAAvB,EAAkCC,MAAlC,EAA0CC,QAA1C,EACKG,IADL,CACWC,QAAD,IAAc;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAN,IAAAA,QAAQ,CAAChB,qBAAqB,CAACmB,QAAQ,CAACG,IAAV,CAAtB,CAAR;AACH,GAJL,EAKKC,KALL,CAKYC,GAAD,IAASR,QAAQ,CAACZ,mBAAmB,CAACoB,GAAD,CAApB,CAL5B;AAMH,CARD;;AAUA,MAAMC,SAAS,GAAIb,UAAD,IAAgB,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,QAApB,KAAkCC,QAAD,IAAc;AAC7EA,EAAAA,QAAQ,CAAClB,gBAAD,CAAR;AACAc,EAAAA,UAAU,CAACK,WAAX,CAAuBJ,SAAvB,EAAkCC,MAAlC,EAA0CC,QAA1C,EACKG,IADL,CACWC,QAAD,IAAcH,QAAQ,CAACb,yBAAyB,CAACgB,QAAQ,CAACG,IAAV,CAA1B,CADhC,EAEKC,KAFL,CAEYC,GAAD,IAAS;AACZR,IAAAA,QAAQ,CAACX,uBAAuB,CAACmB,GAAD,CAAxB,CAAR;AACH,GAJL;AAKH,CAPD;;AASA,MAAME,YAAY,GAAId,UAAD,IAAiBL,EAAD,IAASS,QAAD,IAAc;AACvDJ,EAAAA,UAAU,CAACc,YAAX,CAAwBnB,EAAxB,EACKW,IADL,CACWC,QAAD,IAAcH,QAAQ,CAACV,kBAAkB,CAACC,EAAD,CAAnB,CADhC,EAEKgB,KAFL,CAEYC,GAAD,IAASR,QAAQ,CAACZ,mBAAmB,CAACoB,GAAD,CAApB,CAF5B;AAGH,CAJD;;AASA,SACIb,YADJ,EAEIH,eAFJ,EAGIkB,YAHJ,EAIIhB,oBAJJ,EAKIe,SALJ","sourcesContent":["const domainsRequested = () => {\n    return {\n        type: 'DOMIANS_REQUESTED',\n    }\n}\n\nconst domainsRequestSuccess = (domains) => {\n    return {\n        type: 'DOMIANS_FETCH_SUCCESS',\n        payload: domains\n    }\n}\n\nconst domainsRequestMoreSuccess = (domains) => {\n    return {\n        type: 'DOMAINS_GET_MORE',\n        payload: domains\n    }\n}\n\nconst domainsRequestError = () => {\n    return {\n        type: 'DOMIANS_FETCH_ERROR',\n    }\n}\n\nconst domainsRequestMoreError = () => {\n    return {\n        type: 'DOMIANS_FETCH_MORE_ERROR',\n    }\n}\n\n\n\nconst deleteDomainAction = (id) => {\n    return {\n        type: 'DOMAINS_DELETE_ONE',\n        payload: id\n    }\n}\n\nconst addDomainToList = (domain) => {\n    return {\n        type: 'DOMAINS_ADD_ONE',\n        payload: domain\n    }\n}\n\nconst removeDomainFromList = (id) => {\n    return {\n        type: 'DOMAINS_REMOVE_ONE',\n        payload: id\n    }\n}\n\nconst fetchDomains = (apiService) => (searchUrl, cursor, itemscnt) => (dispatch) => {\n    dispatch(domainsRequested)\n    apiService.domainsList(searchUrl, cursor, itemscnt)\n        .then((response) => {\n            console.log(response.data)\n            dispatch(domainsRequestSuccess(response.data))\n        })\n        .catch((err) => dispatch(domainsRequestError(err)))\n}\n\nconst fetchMore = (apiService) => (searchUrl, cursor, itemscnt) => (dispatch) => {\n    dispatch(domainsRequested)\n    apiService.domainsList(searchUrl, cursor, itemscnt)\n        .then((response) => dispatch(domainsRequestMoreSuccess(response.data)))\n        .catch((err) => {\n            dispatch(domainsRequestMoreError(err))\n        })\n}\n\nconst deleteDomain = (apiService) => (id) => (dispatch) => {\n    apiService.deleteDomain(id)\n        .then((response) => dispatch(deleteDomainAction(id)))\n        .catch((err) => dispatch(domainsRequestError(err)))\n}\n\n\n\n\nexport {\n    fetchDomains,\n    addDomainToList,\n    deleteDomain,\n    removeDomainFromList,\n    fetchMore,\n}"]},"metadata":{},"sourceType":"module"}