{"ast":null,"code":"const leadsRequested = () => {\n  return {\n    type: 'LEADS_REQUESTED'\n  };\n};\n\nconst leadsRequestSuccess = leads => {\n  return {\n    type: 'LEADS_FETCH_SUCCESS',\n    payload: leads\n  };\n};\n\nconst leadsRequestMoreSuccess = leads => {\n  return {\n    type: 'LEADS_GET_MORE',\n    payload: leads\n  };\n};\n\nconst leadsRequestError = () => {\n  return {\n    type: 'LEADS_FETCH_ERROR'\n  };\n};\n\nconst leadsFetchMoreError = () => {\n  return {\n    type: 'LEADS_FETCH_MORE_ERROR'\n  };\n};\n\nconst deleteLeadAction = id => {\n  return {\n    type: 'LEADS_DELETE_ONE',\n    payload: id\n  };\n};\n\nconst addLeadToList = domain => {\n  return {\n    type: 'LEADS_ADD_ONE',\n    payload: domain\n  };\n};\n\nconst removeLeadFromList = id => {\n  return {\n    type: 'LEADS_REMOVE_ONE',\n    payload: id\n  };\n};\n\nconst fetchLeads = apiService => (searchUrl, cursor, itemscnt) => dispatch => {\n  dispatch(leadsRequested);\n  apiService.leadsList(searchUrl, cursor, itemscnt).then(response => dispatch(leadsRequestSuccess(response.data))).catch(err => dispatch(leadsRequestError(err)));\n};\n\nconst fetchMoreLeads = apiService => (searchUrl, cursor, itemscnt) => dispatch => {\n  dispatch(leadsRequested);\n  apiService.leadsList(searchUrl, cursor, itemscnt).then(response => dispatch(leadsRequestMoreSuccess(response.data))).catch(err => dispatch(leadsFetchMoreError(err)));\n};\n\nconst deleteLead = apiService => id => dispatch => {\n  apiService.deleteLead(id).then(response => dispatch(deleteLeadAction(id))).catch(err => dispatch(leadsRequestError(err)));\n};\n\nexport { fetchLeads, addLeadToList, deleteLead, removeLeadFromList, fetchMoreLeads };","map":{"version":3,"sources":["/Users/laurkankusu/Documents/development/domains-server/admin/src/actions/leads.js"],"names":["leadsRequested","type","leadsRequestSuccess","leads","payload","leadsRequestMoreSuccess","leadsRequestError","leadsFetchMoreError","deleteLeadAction","id","addLeadToList","domain","removeLeadFromList","fetchLeads","apiService","searchUrl","cursor","itemscnt","dispatch","leadsList","then","response","data","catch","err","fetchMoreLeads","deleteLead"],"mappings":"AAAA,MAAMA,cAAc,GAAG,MAAM;AACzB,SAAO;AACHC,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJD;;AAMA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AACnC,SAAO;AACHF,IAAAA,IAAI,EAAE,qBADH;AAEHG,IAAAA,OAAO,EAAED;AAFN,GAAP;AAIH,CALD;;AAOA,MAAME,uBAAuB,GAAIF,KAAD,IAAW;AACvC,SAAO;AACHF,IAAAA,IAAI,EAAE,gBADH;AAEHG,IAAAA,OAAO,EAAED;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMG,iBAAiB,GAAG,MAAM;AAC5B,SAAO;AACHL,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJD;;AAMA,MAAMM,mBAAmB,GAAG,MAAM;AAC9B,SAAO;AACHN,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJD;;AAMA,MAAMO,gBAAgB,GAAIC,EAAD,IAAQ;AAC7B,SAAO;AACHR,IAAAA,IAAI,EAAE,kBADH;AAEHG,IAAAA,OAAO,EAAEK;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMC,aAAa,GAAIC,MAAD,IAAY;AAC9B,SAAO;AACHV,IAAAA,IAAI,EAAE,eADH;AAEHG,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMC,kBAAkB,GAAIH,EAAD,IAAQ;AAC/B,SAAO;AACHR,IAAAA,IAAI,EAAE,kBADH;AAEHG,IAAAA,OAAO,EAAEK;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMI,UAAU,GAAIC,UAAD,IAAgB,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,QAApB,KAAkCC,QAAD,IAAc;AAC9EA,EAAAA,QAAQ,CAAClB,cAAD,CAAR;AACAc,EAAAA,UAAU,CAACK,SAAX,CAAqBJ,SAArB,EAAgCC,MAAhC,EAAwCC,QAAxC,EACKG,IADL,CACWC,QAAD,IAAcH,QAAQ,CAAChB,mBAAmB,CAACmB,QAAQ,CAACC,IAAV,CAApB,CADhC,EAEKC,KAFL,CAEYC,GAAD,IAASN,QAAQ,CAACZ,iBAAiB,CAACkB,GAAD,CAAlB,CAF5B;AAGH,CALD;;AAOA,MAAMC,cAAc,GAAIX,UAAD,IAAgB,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,QAApB,KAAkCC,QAAD,IAAc;AAClFA,EAAAA,QAAQ,CAAClB,cAAD,CAAR;AACAc,EAAAA,UAAU,CAACK,SAAX,CAAqBJ,SAArB,EAAgCC,MAAhC,EAAwCC,QAAxC,EACKG,IADL,CACWC,QAAD,IAAcH,QAAQ,CAACb,uBAAuB,CAACgB,QAAQ,CAACC,IAAV,CAAxB,CADhC,EAEKC,KAFL,CAEYC,GAAD,IAASN,QAAQ,CAACX,mBAAmB,CAACiB,GAAD,CAApB,CAF5B;AAGH,CALD;;AAOA,MAAME,UAAU,GAAIZ,UAAD,IAAiBL,EAAD,IAASS,QAAD,IAAc;AACrDJ,EAAAA,UAAU,CAACY,UAAX,CAAsBjB,EAAtB,EACKW,IADL,CACWC,QAAD,IAAcH,QAAQ,CAACV,gBAAgB,CAACC,EAAD,CAAjB,CADhC,EAEKc,KAFL,CAEYC,GAAD,IAASN,QAAQ,CAACZ,iBAAiB,CAACkB,GAAD,CAAlB,CAF5B;AAGH,CAJD;;AASA,SACIX,UADJ,EAEIH,aAFJ,EAGIgB,UAHJ,EAIId,kBAJJ,EAKIa,cALJ","sourcesContent":["const leadsRequested = () => {\n    return {\n        type: 'LEADS_REQUESTED',\n    }\n}\n\nconst leadsRequestSuccess = (leads) => {\n    return {\n        type: 'LEADS_FETCH_SUCCESS',\n        payload: leads\n    }\n}\n\nconst leadsRequestMoreSuccess = (leads) => {\n    return {\n        type: 'LEADS_GET_MORE',\n        payload: leads\n    }\n}\n\nconst leadsRequestError = () => {\n    return {\n        type: 'LEADS_FETCH_ERROR',\n    }\n}\n\nconst leadsFetchMoreError = () => {\n    return {\n        type: 'LEADS_FETCH_MORE_ERROR',\n    }\n}\n\nconst deleteLeadAction = (id) => {\n    return {\n        type: 'LEADS_DELETE_ONE',\n        payload: id\n    }\n}\n\nconst addLeadToList = (domain) => {\n    return {\n        type: 'LEADS_ADD_ONE',\n        payload: domain\n    }\n}\n\nconst removeLeadFromList = (id) => {\n    return {\n        type: 'LEADS_REMOVE_ONE',\n        payload: id\n    }\n}\n\nconst fetchLeads = (apiService) => (searchUrl, cursor, itemscnt) => (dispatch) => {\n    dispatch(leadsRequested)\n    apiService.leadsList(searchUrl, cursor, itemscnt)\n        .then((response) => dispatch(leadsRequestSuccess(response.data)))\n        .catch((err) => dispatch(leadsRequestError(err)))\n}\n\nconst fetchMoreLeads = (apiService) => (searchUrl, cursor, itemscnt) => (dispatch) => {\n    dispatch(leadsRequested)\n    apiService.leadsList(searchUrl, cursor, itemscnt)\n        .then((response) => dispatch(leadsRequestMoreSuccess(response.data)))\n        .catch((err) => dispatch(leadsFetchMoreError(err)))\n}\n\nconst deleteLead = (apiService) => (id) => (dispatch) => {\n    apiService.deleteLead(id)\n        .then((response) => dispatch(deleteLeadAction(id)))\n        .catch((err) => dispatch(leadsRequestError(err)))\n}\n\n\n\n\nexport {\n    fetchLeads,\n    addLeadToList,\n    deleteLead,\n    removeLeadFromList,\n    fetchMoreLeads\n}"]},"metadata":{},"sourceType":"module"}